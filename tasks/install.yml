---
- name: Create release directory
  file:
    path: '{{ deploy_helper.new_release_path }}'
    state: directory
    mode: u=rwX,g=rX,o=rX

# --------------------------------------------------
# Download and extract miarec files into .../releases/{version} folder
# --------------------------------------------------

- name: Verify miarec screen binary presense
  stat:
    path: "{{ deploy_helper.new_release_path }}/miarec_screen"
  register: miarec_screen_bin_exists


- name: Add an unfinished file, to allow cleanup on successful finalize
  file:
    path: '{{ deploy_helper.new_release_path }}/{{ deploy_helper.unfinished_filename }}'
    state: touch
  when: miarec_screen_bin_exists.stat.exists == False


- name: Download miarec tarball
  get_url:
    url: "{{ miarec_screen_download_base_url }}/{{ miarec_screen_tarball_file }}"
    dest: "{{ miarec_screen_download_dir }}/{{ miarec_screen_tarball_file }}"
  when: miarec_screen_bin_exists.stat.exists == False


- name: Untar the source package
  unarchive:
    src: "{{ miarec_screen_download_dir }}/{{ miarec_screen_tarball_file }}"
    dest: "{{ miarec_screen_download_dir }}/"
    creates: "{{ miarec_screen_download_dir }}/miarec_screen-{{ miarec_screen_version }}/miarec_screen"
    copy: no
    mode: u=rwX,g=rX,o=rX
  when: miarec_screen_bin_exists.stat.exists == False


- name: Move miarec files to releases folder
  shell: "mv {{ miarec_screen_download_dir }}/miarec_screen-{{ miarec_screen_version}}/* {{ deploy_helper.new_release_path }}/"
  when: miarec_screen_bin_exists.stat.exists == False



# --------------------------------------------------
# Create required directory
# --------------------------------------------------
- name: Create working directory for miarec
  file:
    path: '{{ miarec_screen_work_dir }}'
    owner: '{{ miarec_screen_bin_user }}'
    group: '{{ miarec_screen_bin_group }}'
    state: directory

- name: Create log directories for miarec
  file:
    path: '{{ item }}'
    owner: '{{ miarec_screen_bin_user }}'
    group: '{{ miarec_screen_bin_group }}'
    state: directory
  with_items:
    - '{{ miarec_screen_log_dir }}'
    - '{{ miarec_screen_log_dir }}/error'
    - '{{ miarec_screen_log_dir }}/trace'


# --------------------------------------------------
# Configuration file production.ini
# It must be owned by root user and "miarec" group.
# It will be readable to group (but not writable).
# It will not be readable to other users
# --------------------------------------------------
- name: Copy miarec_screen.ini file
  copy:
    src: "{{ deploy_helper.new_release_path }}/miarec_screen.ini.sample"
    dest: "{{ deploy_helper.new_release_path }}/miarec_screen.ini"
    force: False
    remote_src: True
    owner: root
    group: '{{ miarec_screen_bin_group }}'
    mode: u=rwX,g=rX,o=


# --------------------------------------------------
# Configuration file
# --------------------------------------------------
- name: Configure miarec_screen.ini file
  ini_file:
    dest: "{{ deploy_helper.new_release_path }}/miarec_screen.ini"
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - section: 'Main'
      option: 'Name'
      value: '{{ miarec_screen_instance_name }}'
    - section: 'Database'
      option: 'Host'
      value: '{{ miarec_db_host }}:{{ miarec_db_port }}'
    - section: 'Database'
      option: 'Database'
      value: '{{ miarec_db_name }}'
    - section: 'Database'
      option: 'Username'
      value: '{{ miarec_db_user }}'
    - section: 'Database'
      option: 'Password'
      value: '{{ miarec_db_password }}'
    - section: 'RedisSubscriber'
      option: 'Host'
      value: '{{ miarec_redis_host }}:{{ miarec_redis_port }}'
    - section: 'API::User::webui'
      option: 'IpAddress'
      value: '127.0.0.1;{{ miarec_rest_api_permitted_hosts }}'
    - section: 'ErrorsLog::File'
      option: 'File'
      value: '{{ miarec_screen_log_dir }}/error/errors.log'
  notify: restart miarec_screen

# --------------------------------------------------
# Install service
# --------------------------------------------------
- fail:
    msg: "Only SystemD and Upstart systems are supported at the moment"
  when: ansible_service_mgr != "upstart" and ansible_service_mgr != "systemd"


- fail:
    msg: "MiaRec upstart script doesn't support run as unprivileged user yet"
  when: ansible_service_mgr == "upstart" and miarec_screen_bin_user != 'root'


- name: Install miarec_screen service | systemd
  template:
    src: "etc_systemd_system_miarec_screen.service.j2"
    dest: "/etc/systemd/system/miarec_screen.service"
    owner: root
    group: root
    mode: 0644
  notify: start miarec_screen
  when: ansible_service_mgr == "systemd"


- name: Install miarec_screen service | upstart
  template:
    src: "etc_init_miarec_screen.conf.j2"
    dest: "/etc/init/miarec_screen.conf"
    owner: root
    group: root
    mode: 0644
  notify: start miarec_screen
  when: ansible_service_mgr == "upstart"


- name: Enable miarec_screen service | systemd or upstart
  service:
    name: miarec_screen
    enabled: yes
  when: ansible_service_mgr == "systemd" or ansible_service_mgr == "upstart"

# Important! do not start the service right now. Postpone it until deploy_helper creates symbolic link to new release folder.

# --------------------------------------------------
# Cleanup
# --------------------------------------------------
- name: Clean up the downloaded files
  file:
    path: '{{ item }}'
    state: absent
  with_items:
    - "{{ miarec_screen_download_dir }}/{{ miarec_screen_tarball_file }}"
    - "{{ miarec_screen_download_dir }}/{{ miarec_screen_tarball_file }}.asc"
  when: miarec_screen_cleanup_downloads|bool

